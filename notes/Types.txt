proc.attr[String]("name")
proc.step[Boolean]("mute")
proc.step[Unit]("trig")
proc.integral("freq")
proc.continous("freq")
proc.control("freq")
proc.signal("freq")
proc.motile("freq")
proc.motion("freq")
proc.ctl("freq")
proc.roll("freq")
! proc.shape("freq")
proc.dynamic("freq")
proc.contour("freq")

proc.io("freq")
! proc.scan("freq")

attr - plain single attribute
step - temporal sequence of attributes
scan - integral or continous temporal envelope or signal

`attr` can be lifted into a `step`
`step` can be lifted into a `scan` iff type is Boolean or Float?

e.g. 

trait Step[T] {
   def ar( implicit ev: T <:< Boolean ) : GE
   def ar( implicit ev: T <:< Float ) : GE
}

(with the problem of the overloading arguments erasing to the same type)

trait Scan { def ar: GE }

trait Step[T] {
   def ar( implicit source: ScanSource: Step[T] => Scan ) : GE = source( this ).ar
}

:::::::::::::::

proc.attrs += "name" -> "Hallo"
proc.steps += "muted" -> false  // default value

vs

proc.step.add[Boolean]( "muted" )  // ?

proc.scans.add( "freq" )
proc.scans.keys
proc.scans.entriesAt( time: Long )

Code[T] {
   def value: T
   def source: Option[String]
}

:::::::::::::::

example graph usage. read:

   WhiteNoise.ar * (1 - Step[Boolean]("muted", true).kr)

   SinOsc.ar(Scan("freq", 441))

( where Scan should fall back to checking against Step[Float] if no scan found? ; perhaps not, because Step[Float] doesn't make much sense anyway ?)

example writing:

   val sil = DetectSilence.ar( ... )
   sil.once ~> Step[Boolean]("muted") // ?  where x.once == Latch(x,x)

   sil.once ~> Step[Unit]("muted")

   sil.once ~> Trigger("muted") // i.e. not bitemporal

--- or put the responsibility on the consumer?

p1:
   val in  = LiveIn( ... )  // ?
   val pch = Pitch.kr( in )
   pch ~> Scan("pitch") --> merely adds a 'server signal' tag, instead of writing the data

p2:
   val pch = Scan("pitch", 441)

p1.scan("pitch") ~> p2.scan("pitch") ??

... so the case of Scan is rather clear : do _not_ write an audio file, unless explicitly with a GE such as LiveIn

LiveIn could function based on an external ephemeral (global?) switch, such as "Record"

what needs clarification is the triggers (Step)

:::::::::::::::::::::

also unclear is whether we need explicit distinction between 'input' and 'output' scans, i.e. whether the graph will "just read" or "just write" the slot?

e.g. what will happen with

    OutScan("test").ar(InScan("test").ar(0))

-- probably it will be "fine", resulting in an InFeedback.ar

:::::::::::::::::::::

    out("test").ar(in("test").ar(0))

    out("trig").tr( DetectSilence.ar( ... ))

    in("muted").tr  // should that be control or audio rate?

so the advantage of the following would be explicit rate:

    scin
    scout
    trin
    trout

no...

    StepIn
    StepOut
    ScanIn
    ScanOut

or apply/update:

    BufCue( Attr[String]("name")() + ".aif" )

    SinOsc.ar( Scan("freq")() )

    val f = Scan( "freq" )()
    SinOsc.ar( f.ar )

??? defaults missing

better lower case anyway, so no confusion with regular GEs

    BufCue( attr[String]("name")( "default" ) + ".aif" )

    SinOsc.ar( scan("freq").ar( 441 ))

    scan("freq")() = Pitch.kr( ... )

vs.

    scan("freq") := Pitch.kr( ... )

Could avoid the type parameter for attr:

    BufCue( attr("name", "default") + ".aif" )

well...

    BufCueOrSilence( attr[AudioFileResource]("file") /*.get */ )

:::::::::::::::::::::

back to detect silence + free self stuff

    trig("done") := DetectSilence.ar( ... )

is this going to write onto a bitemporal plane or not? i think _not_, because it fits with the existing event system which _is_ ephemeral

it may be possible to even forbid assignment of step from the graph function? is there a case where this writing would be useful?

:::::::::::::::::::::

thus a Scan will ultimately be a BiPin[ S, Scan.Elem, _ ] with

object Scan {
   sealed trait Elem[S <: Sys[S]] // { def shape: Env.Shape }
   case class Expr[S <: Sys[S]]( value: Expr[S, Double], shape: Env.Shape ) extends Elem[S]
   case class 
}

:::::::::::::::::::::

proc1.scan("out") -> proc2.scan("freq")

proc1.graph {
  scan("out") := SinOsc.ar(100).linexp(-1,1,20,10000)
}

proc2.graph {
  Out.ar(0, SinOsc.ar( scan("freq").ar(441) ))
}

proc2.play
proc1.play

:::::::::::::::::::::

Interconnections:

- identify buses as tuple (proc, scan-key)
- ProcGraph has map (scan-key, direction) ; is embedded with a proc
- AuralPresentation - play proc :
  - a proc might appear in different AuralPresentations ; in that case there would be independent AuralProc views
  - hence bus sharing information must remain with AuralPresentation, not AuralSystem
  - probably the best (with respect to minimising re-creating stuff due to channel-num change) is a two phase assembly
  - phase 1: traverse list of procs to start. for each encountered bus:
    - is input?
      - is found in AuralPres. map?
        - done. (GE.expand will find the information through some sort of ThreadLocal)
      - not in AuralPres. map?
        - current resolved Scan.Elem is bus driven?
          - defer proc
        - current resolved Scan.Elem is plain control value?
          - done. (add appropriate n_set(n) message)
    - is output?

- idea: allow two iterations (one round of adjustments to each proc, to accomodate negotiation of channel numbers, without the huge effort of a constraints system)

- furthermore it is important to remember that a newly started proc might write to a bus, thus possibly writing a new value into the Scan, on which other procs
  which embed that scan might depend. --> see iteration (1) in next paragraph

:::::::::::::::::::::

(1)
procs.foreach { p =>
   p.graph.scanMap.foreach {
      case (key, Out) => if value at current time in corresponding scan is _not_ Synthesis() : insert that value
      case _ =>
   }
}

(2)
var remaining = Set.empty[ Proc ]
var tried     = Map.empty[ (Proc, String), Set[ Int ]]

remaining ++= allProcsToPlay
var stasis = false
while( remaining.nonEmpty && !stasis ) {
   var unsatisfied = false
   var inChans = Map.empty[ String, Int ]
   var actions = IIdxSeq.empty[ () => Unit ]
   remaining.foreach { p =>
      p.graph.scanMap.foreach { case (key, dir) =>
         if( dir == In ) {
            p.scans.valueAt( key ) match {
               case Some( Scan.Value.MonoConst( v )) =>
                  inChans += key -> 1
                  actions :+= { => /* ...n_set(n)... */ }
               
               case Some( Scan.Value.MonoSegment( start, stop, dur, shape )) =>
                  inChans += key -> 1
                  actions :+= { => /* ...new segment synth... */ }
               
               case Some( Scan.Synthesis( sourceProc )) => // dir == In implies that sourceProc != p
                  busMap.get( sourceProc -> key ) match {
                     case Some( richBus /*???*/ ) =>
                        inChans += key -> richBus.numChannels
                        actions :+= { => /* ...n_mapa... */ }
                     case _ =>
                        unsatisfied = true
                  }

               case _ => // satisfied, control with use default
                  inChans += key -> -1  // special indicator
            }

         } else if( dir == Out ) { // implies after (1) that p.scans.valueAt( key ) == Some( Scan.Value.Synthesis( `p` )) !
            // ideally we'd find out if the number of channels can be determined
            
            
         } else if( dir == Bidi ) { // should we completely forbid Bidi (i.e. enforce separate scan keys for in/out) ?
            
         }
   }

   if( unsatisfied ) {
   
   } else {
      p.graph.synthGraph.expand // ???
   }
}

:::::::::::::::::::::

- Bidi implies the number of channels cannot change, thus depends on the input in the first place

- this whole iteration (2) should be incorporated into the UGenGraphBuilder ?

- how about we construct a UGenGraphBuilder which can catch special control exceptions thrown by Lazy's expand
- and thus not iterate over (maybe not even build explicitly) scanMap; scanMap could be build dynamically as
  the ugen graph is created.
- the ThreadLocal builder would still collect all the ugens that have been expanded until the exception is
  thrown (this would be automatically found in the cache in a new iteration).

'standard' build process in ScalaCollider:

      def build : UGenGraph = {
         var g                = graph
         var controlProxies   = MBuffer.empty[ ControlProxyLike[ _ ]]
         while( g.nonEmpty ) {
            controlProxies ++= g.controlProxies
            g = SynthGraph( g.sources.foreach { src =>
               src.force( builder )
            })  // allow for further graphs being created
         }
         val ctrlProxyMap        = buildControls( controlProxies )
         val (igens, constants)  = indexUGens( ctrlProxyMap )
         val indexedUGens        = sortUGens( igens )
         val richUGens : IIdxSeq[ RichUGen ] =
            indexedUGens.map( iu => RichUGen( iu.ugen, iu.richInputs.map( _.create )))( breakOut )
         UGenGraph( constants, controlValues, controlNames, richUGens )
      }

new approach (sketch):

      procs.foreach { p =>
         ub = new CustomBuilder( p.graph.synthGraph ) // initiates builder with all sources (not yet forced)
         UGenGraphBuilder.use( ub ) { // need to add that method in ScalaCollider
            ub.tryBuild() match {
               case Some( ug ) => ...
               case _ =>
                  
         }
      }

      trait CustomBuilder {
         // tries to build the graph. if there is a problem due to missing
         // scan input channel information, stops at that point and returns
         // `None`. In that case, when more information is available, this
         // method can be called again (it thus incrementally builds the graph).
         def tryBuild() : Option[ UGenGraph ]
         
         // common API
         def visit[ U ]( ref: AnyRef, init: => U ) : U
         def addUGen( ugen: UGen )
         def addControl( values: IIdxSeq[ Float ], name: Option[ String ])
      }

      // roughly like this
      class CustomBuilderImpl( g: Graph ) {
         builder =>

         private var remaining       = g.sources
         private var controlProxies  = MBuffer[ ControlProxyLike[ _ ]]( g.controlProxies )
         private var missing         = IIdxSeq.empty[ Lazy ]

         def tryBuild() : Option[ UGenGraph ] = {
            var missingInfo = false
            while( !missingInfo && remaining.nonEmpty ) {
               val g = SynthGraph {
                  remaining.foreach { src =>
                     try {
                        src.force( builder )
                     } catch {
                        catch e: MissingChannelInfo =>
                        missing :+= src
                     }
                  }
                  missingInfo |= remaining.nonEmpty
               }
               if( g.nonEmpty ) {
                  remaining ++= g.sources
                  controlProxies ++= g.controlProxies
               }
            }
            if( missingInfo ) None else Some( standardBuildStuff() )
         }
      }

:::::::::::::

alternative: the UGenGraphBuilder can match the sources, and avoid putting logic into them that requires reaction (looking up the Proc as a thread-local, throwing a control exception, ...); so that their `force` can be reduced to providing a `In`/control or `Out`.

      // graph elements / lazies

kann nicht funktionieren, weil force auch von dependent GE aufgerufen wird (e.g. SinOsc.ar( scan.In( key ))), u.U. vor dem graph builder

- it might be that we need to handle some more details of the ugen graph builder differently; e.g. make visitation map immutable, so that upon catching MissingInfo it can be safely restored (because otherwise depending ugens will be dropped in the next try)












