:::::::::::::::

proc
   freq

proc in time
   freq -> bi

:::::::::::::::

transport
   play( implicit source: TimeSource )

that would mean we create a possibly infinite chain of signification here as well! that means there is a re-entry of p time

:::::::::::::::

BiSource[ S <: Sys[ S ], A ] {
   def get( implicit tx: S#Tx, time: TimeSource[ S ]) : A
}

BiSink[ S <: Sys[ S ], A ]
   def set( value: A )( implicit tx: S#Tx, time: TimeSource[ S ]) : Unit
}

BiVar extends BiSource with BiSink

that is to say, no mention of Expr in Bi's type parameter A

:::::::::::::::

object Bi {
   trait Var[ S <: Sys[ S ], A ] extends Bi[ S, A ] with BiVar[ S, Expr[ S, A ]]
}
trait Bi[ S <: Sys[ S ], A ] {
   def projection( implicit tx: S#Tx, time: TimeSource[ S ]) : Expr[ S, A ]
   def value( implicit tx: S#Tx, time:  TimeSource[ S ]) : A
   def changed: EventLike[ S, Bi.Update[ S, A ], Bi[ S, A ]]
}

:::::::::::::::

valueSpan( time: Long ) : (Long, A)

:::::::::::::::

the problem of Chronus is that most likely that would be a Transport, and that in turn can not be serialized _along with chronus_, because that essentially depends on system thus, i.e. must be a live view

:::::::::::::::

so let's rethink --- as simple as possible first:

trait BiExpr[ S <: Sys[ S ], A ] {
   def projection( time: Expr[ S, Long ])( implicit tx: S#Tx ) : Expr[ S, A ]
   def valueAt( time: Long )( implicit tx: S#Tx ) : A
   def changed: EventLike[ S, Bi.Update[ S, A ], Bi[ S, A ]]
}

BiVar
   setAt( time: Long, value: A )
   getAt( time: Long )

:::::::::::::::

Proc {
   controls
}

maxWaitSpan = p.controls.foldLeft( Span.from( now )) { case ((span, _), min) => min intersect span }

:::::::::::::::

actor {
   loopWhile( isRunning ) {
      reactWithin ( ... )
         case TIMEOUT => advance( logicalTargetTime )
         case x => ...
      }
   }
}

:::::::::::::::

- proc's do not come into existence outside-time; for an auralpresentation, the time at which they are added or removed from the group matters
- therefore, ProcGroup should be bitemporal as well
- if not, it would mean that the transport needs to iterate over all procs no matter when they have been created, to gather the next interval
- it should thus be modelled similar to Inst.Var (formerly BiExpr.Var); but must be capable of having an iterable as its value
- clearly, the plain skiplist doesn't work, since we will need to iterate on its ordering domain and detect incremental changes (proc removed, proc added)

- first idea: use a 2D octree with one axis for start time, one for stop time; values must be able to accomodate multiple procs!
  ; possible disadvantage: half of the space will be unused (since start <= stop); must be possible to represented open intervals

:::::::::::::::

step: TxnLocal[ Long ]
 -1 --> transport stopped
 0 <= t --> next event time

interr: Ref[ Int ]

touchTxnAfterHook: TxnLocal[ Unit ]( initialize = { tx =>
   Txn.beforeCommit { _ =>
      val st = step()
      val expected =interr()
      Txn.afterCommit { _ =>
         if( st >= 0 ) { 
            val fut = pool.schedule {
               t { implicit tx =>
                  if( interr() == expected ) {
                     ...
                  
               }
            }
            // ??? how to store the future ???
         } else {
            fut.cancel()
         }
      }
   }
})


def play() {
   if( aleadyPlaying ) return
   step.set( calcStep )
   touchTxnAfterHook()
}

def stop() {
   if( !alreadyPlaying ) return
//   fut.cancel()
   step() = -1
   expected += 1
   touchTxnAfterHook()
}

::::::::::::::::

Self-Access

why the tests have failed

- S#Var --> uses its own path
- tx.access( ) --> not implemented in Confluent (Exception is stupidly eaten)
- IDMap --> works only correctly with up-to-date ID

:::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::

Transport[ S ] {
   seek
   <>playing
   sampleRate
   iterator
   
   changed: Event
}

TransportView[ S ] {
   def transport: Transport[ S ]

   def changed: Event
}

::::::::::::::

NextEvent:
   graphemes: IIdxSeq[ (S#ID, String) ]  // timed-id, key
   procs: Boolean


::::::::::

say we have IDMap[ Grapheme.Value ]

grapheme updates are IIdxSeq[ Grapheme.Value ]

do we need to previous times?

Proc will have Map[ String -> IIdxSeq[ Grapheme.Update ]]

:: transport view observation algorithm ::

U = ProcGroup will have (group, IIdxSeq[ (TimedProc[ S ], Map[ String -> IIdxSeq[ Grapheme.Update ]])
                                         = ID

if transport view maintains: 
(1) IDMap[ ID(stale) -> Map[ String, (Long, Grapheme.Value) ]]
(2) SkipList.Map[ Long, Map[ (ID(stale), Map[ String, Grapheme.Value ]]]
(3) IDMap[ TimedProc[ S ]]

with update U arriving, we will be able
- to check whether we are currently observing the proc, by trying contains in (3)
- if so, to look up the (ID(stale), Long, Grapheme.Value) stored in (1)
- to filter wrt the grapheme value's span (whether U affects invalidates that value)
    - invalidation means: the update's span.stop is greater than the current transport time
                          && the update's span.start is smaller than the stored value's span.stop
- if so, to consequently look up and remove the value from the skiplist, and re-insert the updated value

:: this does not yet deal with the scan indirection ::

let's assume that the String elements above are the _scan keys_ not _grapheme keys_, i.e. referring to
scans of the process whose _source_ is a grapheme (no matter where that grapheme is stored)

