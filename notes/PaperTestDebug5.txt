____PAPER____ newGroup
____PAPER____ react to new group
[16 Apr 2012, 23:12'59.231] Lucre - evt Targets<1 @ > add( 1, ObserverKey(0))
[16 Apr 2012, 23:12'59.237] Lucre - evt Targets<1 @ > old children = Vector()
[16 Apr 2012, 23:12'59.238] Lucre - evt Node<1 @ >.event[Collection[<?>]] connect
[16 Apr 2012, 23:12'59.239] Lucre - evt Targets<1 @ > add( 2, ObserverKey(0))
[16 Apr 2012, 23:12'59.239] Lucre - evt Targets<1 @ > old children = Vector((1,ObserverKey(0)))
[16 Apr 2012, 23:12'59.239] Lucre - evt Node<1 @ >.event[Element[<?>]] connect
____PAPER____ freq = exprVar( 50.0 )
____PAPER____ newAccess( freq )
____PAPER____ access group
____PAPER____ p = newProc()
____PAPER____ access freqVar
____PAPER____ p.freq = freqVar
[16 Apr 2012, 23:12'59.402] Lucre - evt Expr.Var<14 @ > set Expr.Var<6 @ 1,1> (con = false)
____PAPER____ group.add( p )
[16 Apr 2012, 23:12'59.464] Lucre - evt Targets<11 @ > add( 1, Node<1 @ 0,1>.event[Element[<?>]])
[16 Apr 2012, 23:12'59.465] Lucre - evt Targets<11 @ > old children = Vector()
[16 Apr 2012, 23:12'59.466] Lucre - evt Expr.Var<14 @ >.map[FreqChanged[<?>]] connect
[16 Apr 2012, 23:12'59.466] Lucre - evt Targets<14 @ > add( 1, Expr.Var<14 @ >.map[FreqChanged[<?>]])
[16 Apr 2012, 23:12'59.466] Lucre - evt Targets<14 @ > old children = Vector()
[16 Apr 2012, 23:12'59.466] Lucre - evt Expr.Var<14 @ > connect
[16 Apr 2012, 23:12'59.466] Lucre - evt Targets<6 @ 1,1> add( 1, Expr.Var<14 @ >)
[16 Apr 2012, 23:12'59.473] Lucre - evt Targets<6 @ 1,1> old children = Vector()
[16 Apr 2012, 23:12'59.473] Lucre - evt Expr.Var<6 @ 1,1> connect
[16 Apr 2012, 23:12'59.478] Lucre - evt Node<1 @ 0,1>.event[Collection[<?>]] fire Added(Node<1 @ 0,1>,Vector(Proc<11 @ >))
[16 Apr 2012, 23:12'59.480] Lucre - evt push begin
[16 Apr 2012, 23:12'59.482] Lucre - evt   addLeaf ObserverKey(0), parent = Node<1 @ 0,1>.event[Collection[<?>]]
[16 Apr 2012, 23:12'59.484] Lucre - evt pull begin
[16 Apr 2012, 23:12'59.484] Lucre - evt numReactions = 1
____OBSERVE____ Added(Node<1 @ 0,1>,Vector(Proc<11 @ >))
[16 Apr 2012, 23:12'59.486] Lucre - evt pull end
____PAPER____ newAccess( p )
____PAPER____ access p
____PAPER____ access freqVar
____PAPER____ p.freq = freqVar * 1.4
[16 Apr 2012, 23:12'59.644] Lucre - evt Expr.Var<14 @ 2,2> set (Expr.Var<6 @ 1,2> * 1.4) (con = true)
[16 Apr 2012, 23:12'59.645] Lucre - evt Targets<6 @ 1,2> remove( 1, Expr.Var<14 @ 2,2>)
[16 Apr 2012, 23:12'59.659] Lucre - evt Targets<6 @ 1,2> old children = Vector((1,Targets<14 @ 2,2>.select(1)))
[16 Apr 2012, 23:12'59.662] Lucre - evt Targets<19 @ > add( 1, Expr.Var<14 @ 2,2>)
[16 Apr 2012, 23:12'59.662] Lucre - evt Targets<19 @ > old children = Vector()
[16 Apr 2012, 23:12'59.662] Lucre - evt (Expr.Var<6 @ 1,2> * 1.4) connect
[16 Apr 2012, 23:12'59.662] Lucre - evt Targets<6 @ 1,2> add( 1, (Expr.Var<6 @ 1,2> * 1.4))
[16 Apr 2012, 23:12'59.662] Lucre - evt Targets<6 @ 1,2> old children = Vector()
[16 Apr 2012, 23:12'59.663] Lucre - evt Expr.Var<6 @ 1,2> connect
[16 Apr 2012, 23:12'59.670] Lucre - evt Expr.Var<14 @ 2,2> fire Change(50.0,70.0)
[16 Apr 2012, 23:12'59.670] Lucre - evt push begin
[16 Apr 2012, 23:12'59.675] Lucre - evt   visit Targets<11 @ 2,2>.select(1) (new ? true)
[16 Apr 2012, 23:12'59.677] Lucre - evt     visit Node<1 @ 0,2>.event[Element[<?>]] (new ? true)
[16 Apr 2012, 23:12'59.682] Lucre - evt       addLeaf ObserverKey(0), parent = Node<1 @ 0,2>.event[Element[<?>]]
[16 Apr 2012, 23:12'59.682] Lucre - evt pull begin
[16 Apr 2012, 23:12'59.682] Lucre - evt numReactions = 1
____OBSERVE____ Element(Node<1 @ 0,2>,Vector(FreqChanged(Proc<11 @ 2,2>,Change(50.0,70.0))))
[16 Apr 2012, 23:12'59.687] Lucre - evt pull end
____PAPER____ access group
____PAPER____ p1 = p.meld( v1 )
____PAPER____ group.add( p1 ) 
[16 Apr 2012, 23:12'59.791] Lucre - evt Targets<11 @ 2,2> add( 1, Node<1 @ 0,3>.event[Element[<?>]])
[16 Apr 2012, 23:12'59.792] Lucre - evt Targets<11 @ 2,2> old children = Vector((1,Node<1 @ 0,2>.event[Element[<?>]]))	  // this should use the main access, yielding Node<1 @ 0,3> ???
    but then this is the proc which has confluent children...

[16 Apr 2012, 23:12'59.793] Lucre - evt Expr.Var<14 @ 2,2>.map[FreqChanged[<?>]] re-connect
[16 Apr 2012, 23:12'59.793] Lucre - evt Targets<14 @ 2,2> remove( 1, Expr.Var<14 @ 2,2>.map[FreqChanged[<?>]])
[16 Apr 2012, 23:12'59.794] Lucre - evt Targets<14 @ 2,2> old children = Vector((1,Targets<11 @ 2,2>.select(1)))
[16 Apr 2012, 23:12'59.796] Lucre - evt Targets<6 @ 1,2> remove( 1, Expr.Var<14 @ 2,2>)
[16 Apr 2012, 23:12'59.800] Lucre - evt Targets<6 @ 1,2> old children = Vector((1,Targets<19 @ 3,3>.select(1)))
[16 Apr 2012, 23:12'59.801] Lucre - evt Targets<6 @ 1,2> selector not found
[16 Apr 2012, 23:12'59.801] Lucre - evt Targets<14 @ 2,2> add( 1, Expr.Var<14 @ 2,2>.map[FreqChanged[<?>]])
[16 Apr 2012, 23:12'59.801] Lucre - evt Targets<14 @ 2,2> old children = Vector()
[16 Apr 2012, 23:12'59.802] Lucre - evt Expr.Var<14 @ 2,2> connect
[16 Apr 2012, 23:12'59.803] Lucre - evt Targets<6 @ 1,2> add( 1, Expr.Var<14 @ 2,2>)
[16 Apr 2012, 23:12'59.807] Lucre - evt Targets<6 @ 1,2> old children = Vector((1,Targets<19 @ 3,3>.select(1)))
[16 Apr 2012, 23:12'59.807] Lucre - evt Expr.Var<6 @ 1,2> re-connect
[16 Apr 2012, 23:12'59.809] Lucre - evt Node<1 @ 0,3>.event[Collection[<?>]] fire Added(Node<1 @ 0,3>,Vector(Proc<11 @ 2,2>))
[16 Apr 2012, 23:12'59.809] Lucre - evt push begin
[16 Apr 2012, 23:12'59.809] Lucre - evt   addLeaf ObserverKey(0), parent = Node<1 @ 0,3>.event[Collection[<?>]]
[16 Apr 2012, 23:12'59.809] Lucre - evt pull begin
[16 Apr 2012, 23:12'59.809] Lucre - evt numReactions = 1
____OBSERVE____ Added(Node<1 @ 0,3>,Vector(Proc<11 @ 2,2>))
[16 Apr 2012, 23:12'59.809] Lucre - evt pull end
____PAPER____ access freqVar
____PAPER____ freqVar.set( 40.0 )
[16 Apr 2012, 23:12'59.873] Lucre - evt Expr.Var<6 @ 1,3,4,4> set 40.0 (con = true)
[16 Apr 2012, 23:12'59.874] Lucre - evt Expr.Var<6 @ 1,3,4,4> fire Change(50.0,40.0)
[16 Apr 2012, 23:12'59.874] Lucre - evt push begin
[16 Apr 2012, 23:12'59.884] Lucre - evt   visit Targets<19 @ 3,3,4,4>.select(1) (new ? true)					// times
[16 Apr 2012, 23:12'59.889] Lucre - evt     visit Targets<14 @ 2,3,4,4>.select(1) (new ? true)					//   proc
[16 Apr 2012, 23:12'59.891] Lucre - evt       visit Targets<11 @ 2,3,4,4>.select(1) (new ? true)				//     proc.freq
[16 Apr 2012, 23:12'59.899] Lucre - evt         visit Node<1 @ 0,3,4,4>.event[Element[<?>]] (new ? true)			//       group
[16 Apr 2012, 23:12'59.906] Lucre - evt           addLeaf ObserverKey(0), parent = Node<1 @ 0,3,4,4>.event[Element[<?>]]	//         (OK)
[16 Apr 2012, 23:12'59.907] Lucre - evt   visit Targets<14 @ 2,2,4,4>.select(1) (new ? true)					// proc
[16 Apr 2012, 23:12'59.912] Lucre - evt     visit Targets<11 @ 2,2,4,4>.select(1) (new ? true)					//   proc.freq
[16 Apr 2012, 23:12'59.916] Lucre - evt       visit Node<1 @ 0,2,4,4>.event[Element[<?>]] (new ? true)				//     group
[16 Apr 2012, 23:12'59.917] Lucre - evt         addLeaf ObserverKey(0), parent = Node<1 @ 0,2,4,4>.event[Element[<?>]]		//       (OK)
[16 Apr 2012, 23:12'59.917] Lucre - evt   visit Node<1 @ 0,3,4,4>.event[Element[<?>]] (new ? false)				// group???
[16 Apr 2012, 23:12'59.917] Lucre - evt pull begin
[16 Apr 2012, 23:12'59.917] Lucre - evt numReactions = 2
____OBSERVE____ Element(Node<1 @ 0,3,4,4>,Vector(FreqChanged(Proc<11 @ 2,2,4,4>,Change(50.0,40.0)), FreqChanged(Proc<11 @ 2,2,4,4>,Change(50.0,40.0))))
____OBSERVE____ Element(Node<1 @ 0,2,4,4>,Vector(FreqChanged(Proc<11 @ 2,2,4,4>,Change(50.0,40.0))))
[16 Apr 2012, 23:12'59.925] Lucre - evt pull end

::: visited :::
Targets<14 @ 2,2,4,4>.select(1) -> Set(Expr.Var<6 @ 1,3,4,4>),
Targets<14 @ 2,3,4,4>.select(1) -> Set(Targets<19 @ 3,3,4,4>.select(1)),
Expr.Var<6 @ 1,3,4,4> -> Set(),
Targets<11 @ 2,3,4,4>.select(1) -> Set(Targets<14 @ 2,3,4,4>.select(1)),
Node<1 @ 0,2,4,4>.event[Element[<?>]] -> Set(Targets<11 @ 2,2,4,4>.select(1)), 
Node<1 @ 0,3,4,4>.event[Element[<?>]] -> Set(Targets<11 @ 2,3,4,4>.select(1), Targets<11 @ 2,2,4,4>.select(1)), 
Targets<19 @ 3,3,4,4>.select(1) -> Set(Expr.Var<6 @ 1,3,4,4>), 
Targets<11 @ 2,2,4,4>.select(1) -> Set(Targets<14 @ 2,2,4,4>.select(1))

::: first parent :::
Node<1 @ 0,3,4,4>.event[Element[<?>]] pull
   elems = Targets<11 @ 2,3,4,4>.select(1)  // proc.freq
   tx._readUgly[ Elem ]( reactor.id, sel.reactor.id ) (where reactor = Node<1 @ 0,3,4,4>; sel.reactor = Targets<11 @ 2,3,4,4>)
   --> elem = Proc<11 @ 2,2,4,4>

that's why it's called _readUgly I guess...

readUgly --> cacheGetTxn
   index = Path(0, 3, 4)
   preLen = 3
   writeTerm = 4
   --> therefore we end up with <4,4> as suffix :-/

