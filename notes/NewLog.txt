
____VERSION____ v0 (root)
______ACT______ newGroup

____VERSION____ v1
______ACT______ freq = exprVar( 50.0 )
______ACT______ newAccess( freq )

____VERSION____ v2
______ACT______ p = newProc()
______ACT______ p.freq = freqVar
______ACT______ group.add( p )
______ACT______ newAccess( p )

____VERSION____ v3
______ACT______ p.freq = freqVar * 1.4

____VERSION____ v4
[...]
SuperCollider 3 server ready (debug build).
r: [ "/n_go", 1, 0, -1, -1, 1, -1, -1 ]
[1 May 2012, 22:33'18.769] Proc - aural added Proc<11 @ 2,3> -- playing? true
s: [ #bundle, <now>,
  [ "/d_recv", DATA[7453] ],
  [ "/sync", 0 ] ]
r: [ "/done", "/d_recv" ]
r: [ "/synced", 0 ]
s: [ #bundle, <now>,
  [ "/s_new", "proc0", 1000, 0, 1, "freq", 70.0 ] ]
r: [ "/n_go", 1000, 1, -1, -1, 0 ]

____VERSION____ v5
______ACT______ p' = p.meld( Path(0, 2) )
......yields Proc<11 @ 2,2>
______ACT______ group.add( p' )
[1 May 2012, 22:33'24.585] Proc - aural added Proc<11 @ 2,2> -- playing? true
s: [ #bundle, <now>,
  [ "/d_recv", DATA[7453] ],
  [ "/sync", 1 ] ]
r: [ "/done", "/d_recv" ]
r: [ "/synced", 1 ]
s: [ #bundle, <now>,
  [ "/s_new", "proc1", 1001, 0, 1, "freq", 50.0 ] ]
r: [ "/n_go", 1001, 1, -1, 1000, 0 ]

____VERSION____ v6
______ACT______ freqVar.set( 80.0 )
[1 May 2012, 22:33'28.721] Proc - aural freq changed Proc<11 @ 2,4,5,5>
[1 May 2012, 22:33'28.723] Proc - aural freq changed Proc<11 @ 2,2,5,5>
aural changes: FreqChanged(Proc<11 @ 2,4,5,5>,Change(70.0,112.0)),FreqChanged(Proc<11 @ 2,2,5,5>,Change(50.0,80.0))
s: [ #bundle, <now>,
  [ "/n_set", 1000, "freq", 112.0 ],
  [ "/n_set", 1001, "freq", 80.0 ] ]

____VERSION____ v7
______ACT______ freqVar.set( 60.0 )
[1 May 2012, 22:33'32.781] Proc - aural freq changed Proc<11 @ 2,4,5,6>
[1 May 2012, 22:33'32.781] Proc - aural freq changed Proc<11 @ 2,2,5,6>
aural changes: FreqChanged(Proc<11 @ 2,4,5,6>,Change(112.0,84.0)),FreqChanged(Proc<11 @ 2,2,5,6>,Change(80.0,60.0))
s: [ #bundle, <now>,
  [ "/n_set", 1000, "freq", 84.0 ],
  [ "/n_set", 1001, "freq", 60.0 ] ]

____VERSION____ v8
______ACT______ p.freq = freqVar * (1.4 * 1.4)
[1 May 2012, 22:33'36.826] Proc - aural freq changed Proc<11 @ 2,4,5,7>
aural changes: FreqChanged(Proc<11 @ 2,4,5,7>,Change(84.0,117.59999999999998))
s: [ #bundle, <now>,
  [ "/n_set", 1000, "freq", 117.6 ] ]

____VERSION____ v9
______ACT______ p' = p.meld( Path(0, 4, 5, 7) )
......yields Proc<11 @ 2,4,5,7>
______ACT______ group.add( p' )
[1 May 2012, 22:33'40.957] Proc - aural added Proc<11 @ 2,4,5,7> -- playing? true
s: [ #bundle, <now>,
  [ "/d_recv", DATA[7453] ],
  [ "/sync", 2 ] ]
r: [ "/done", "/d_recv" ]
r: [ "/synced", 2 ]
s: [ #bundle, <now>,
  [ "/s_new", "proc2", 1002, 0, 1, "freq", 84.0 ] ]
r: [ "/n_go", 1002, 1, -1, 1001, 0 ]

____VERSION____ v10
______ACT______ freqVar.set( 50.0 )
[1 May 2012, 22:43'45.555] Lucre - evt Expr.Var<6 @ 1,4,5,8,9,9> set 50.0 (con = true)
[1 May 2012, 22:43'45.556] Lucre - evt Expr.Var<6 @ 1,4,5,8,9,9> fire Change(60.0,50.0)
[1 May 2012, 22:43'45.556] Lucre - evt push begin
[1 May 2012, 22:43'45.559] Lucre - evt   visit VirtualNode.Raw<22 @ 2,2,5,7,9,9>.select(1) (new ? true)				// proc.freq.ref
[1 May 2012, 22:43'45.560] Lucre - evt     visit VirtualNode.Raw<11 @ 2,2,5,7,9,9>.select(4) (new ? true)			// proc
[1 May 2012, 22:43'45.561] Lucre - evt       visit VirtualNode.Raw<1 @ 0,4,5,7,9,9>.select(2) (new ? true)			// group
[1 May 2012, 22:43'45.562] Lucre - evt         addLeaf ObserverKey(0), parent = VirtualNode.Raw<1 @ 0,4,5,7,9,9>.select(2)
[1 May 2012, 22:43'45.562] Lucre - evt   visit VirtualNode.Raw<31 @ 8,7,9,9>.select(1) (new ? true)				// times (1.4*1.4)
[1 May 2012, 22:43'45.563] Lucre - evt     visit VirtualNode.Raw<22 @ 2,4,5,8,9,9>.select(1) (new ? true)			// proc.freq.ref
[1 May 2012, 22:43'45.564] Lucre - evt       visit VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4) (new ? true)			// proc
[1 May 2012, 22:43'45.564] Lucre - evt         visit VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2) (new ? true)			// group
[1 May 2012, 22:43'45.566] Lucre - evt           addLeaf ObserverKey(0), parent = VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2)
[1 May 2012, 22:43'45.566] Lucre - evt   visit VirtualNode.Raw<28 @ 5,7,9,9>.select(1) (new ? true)				// times (1.4)
[1 May 2012, 22:43'45.568] Lucre - evt     visit VirtualNode.Raw<22 @ 2,4,5,7,9,9>.select(1) (new ? true)			// proc.freq.ref
[1 May 2012, 22:43'45.568] Lucre - evt       visit VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4) (new ? true)			// proc
[1 May 2012, 22:43'45.568] Lucre - evt         visit VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2) (new ? false)			// group
[1 May 2012, 22:43'45.569] Lucre - evt pull begin
[1 May 2012, 22:43'45.569] Lucre - evt numReactions = 2
[1 May 2012, 22:33'45.090] Proc - aural freq changed Proc<11 @ 2,2,5,7,9,9>
aural changes: FreqChanged(Proc<11 @ 2,2,5,7,9,9>,Change(60.0,50.0))
[1 May 2012, 22:33'45.090] Proc - aural freq changed Proc<11 @ 2,4,5,8,9,9>
aural changes: FreqChanged(Proc<11 @ 2,4,5,8,9,9>,Change(117.59999999999998,97.99999999999999))  // this should have a second proc!
s: [ #bundle, <now>,
  [ "/n_set", 1001, "freq", 50.0 ],
  [ "/n_set", 1000, "freq", 98.0 ] ]

Final list of procs in group is [ (Proc<11 @ 2,4,5,7,9,10>,70.0), (Proc<11 @ 2,4,5,8,9,10>,97.99999999999999), (Proc<11 @ 2,2,5,8,9,10>,50.0) ]

therefore in v10 we miss an update for Proc<11 @ 2,4,5,7,9,9> ; the query yields freq 70.0 Hz, but the view has seen only 84.0 Hz

::::::::::::::

Node<1 @ 0,4,5,8,9,9>.event[Element[<?>]] : parents = Set(VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4), VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4))  [OK]
flatMap:
(1)
   sel 		= VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4)
   elem		= Proc<11 @ 2,4,5,8,9,9>
   event	= Expr.Var<22 @ 2,4,5,8,9,9>.map[FreqChanged[<?>]]
   pulled	= Some(FreqChanged(Proc<11 @ 2,4,5,8,9,9>,Change(117.59999999999998,97.99999999999999)))
(2)
   sel		= VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4)
   elem		= Proc<11 @ 2,4,5,7,9,9>
   event	= Expr.Var<22 @ 2,4,5,7,9,9>.map[FreqChanged[<?>]]
       Expr.Var<22 @ 2,4,5,7,9,9> pull
       --> parents = Set(VirtualNode.Raw<28 @ 5,7,9,9>.select(1))
       --> thus branch to get.changed.pullUpdate( pull )

	get = (Expr.Var<6 @ 1,2,5,7,9,9> * 1.4) aka `times` (Targets<28 @ 5,7,9,9>)
           _1c = Expr.Var<6 @ 1,2,5,7,9,9>
           _2c = (dummy)

           Expr.Var<6 @ 1,2,5,7,9,9> isSource ? aka pull.hasVisited( Expr.Var<6 @ 1,2,5,7,9,9> )

           visited.keys = Set(VirtualNode.Raw<22 @ 2,4,5,7,9,9>.select(1),
                              VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2),
                              VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4),
                              VirtualNode.Raw<22 @ 2,4,5,8,9,9>.select(1),
                              VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4) 
                              VirtualNode.Raw<31 @ 8,7,9,9>.select(1),
                              VirtualNode.Raw<1 @ 0,4,5,7,9,9>.select(2),
                              VirtualNode.Raw<22 @ 2,2,5,7,9,9>.select(1),
                              VirtualNode.Raw<28 @ 5,7,9,9>.select(1),
                              Expr.Var<6 @ 1,4,5,8,9,9>,                             // !
                              VirtualNode.Raw<11 @ 2,2,5,7,9,9>.select(4))

          ---> returns false **because the confluent ID is checked, and not the partial one**

That at least let's us hope that the problem is solveable
