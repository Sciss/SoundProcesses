
____VERSION____ v0 (root)
______ACT______ newGroup

____VERSION____ v1
______ACT______ freq = exprVar( 50.0 )
______ACT______ newAccess( freq )

____VERSION____ v2
______ACT______ p = newProc()
______ACT______ p.freq = freqVar
______ACT______ group.add( p )
______ACT______ newAccess( p )

____VERSION____ v3
______ACT______ p.freq = freqVar * 1.4

____VERSION____ v4
fCoreAudioDriverUID com_motu_driver_FWA_Engine:0000014326
Number of Devices: 11
   0 : "Built-in Microphone"
   1 : "Built-in Input"
   2 : "Built-in Output"
   3 : "CD Spin Doctor Capture Support"
   4 : "Soundflower (2ch)"
   5 : "Soundflower (16ch)"
   6 : "Adobe Encore DVD 4.0.1"
   7 : "Adobe Media Encoder 4.0"
   8 : "After Effects 9.0.2"
   9 : "Premiere Pro 4.0"
   10 : "Soundbooth 2.0"

"Built-in Microphone" Input Device
   Streams: 1
      0  channels 2

"Built-in Output" Output Device
   Streams: 1
      0  channels 2

SC_AudioDriver: sample rate = 44100.000000, driver's block size = 512
SuperCollider 3 server ready (debug build).
r: [ "/n_go", 1, 0, -1, -1, 1, -1, -1 ]
[2 May 2012, 01:43'07.535] Proc - aural added Proc<11 @ 2,3> -- playing? true
s: [ #bundle, <now>,
  [ "/d_recv", DATA[7453] ],
  [ "/sync", 0 ] ]
r: [ "/done", "/d_recv" ]
r: [ "/synced", 0 ]
s: [ #bundle, <now>,
  [ "/s_new", "proc0", 1000, 0, 1, "freq", 70.0 ] ]
r: [ "/n_go", 1000, 1, -1, -1, 0 ]

____VERSION____ v5
______ACT______ p' = p.meld( Path(0, 2) )
......yields Proc<11 @ 2,2>
______ACT______ group.add( p' )
[2 May 2012, 01:43'12.338] Proc - aural added Proc<11 @ 2,2> -- playing? true
s: [ #bundle, <now>,
  [ "/d_recv", DATA[7453] ],
  [ "/sync", 1 ] ]
r: [ "/done", "/d_recv" ]
r: [ "/synced", 1 ]
s: [ #bundle, <now>,
  [ "/s_new", "proc1", 1001, 0, 1, "freq", 50.0 ] ]
r: [ "/n_go", 1001, 1, -1, 1000, 0 ]

____VERSION____ v6
______ACT______ freqVar.set( 80.0 )
[2 May 2012, 01:43'16.510] Proc - aural freq changed Proc<11 @ 2,4,5,5>
[2 May 2012, 01:43'16.511] Proc - aural freq changed Proc<11 @ 2,2,5,5>
aural changes: FreqChanged(Proc<11 @ 2,4,5,5>,Change(70.0,112.0)),FreqChanged(Proc<11 @ 2,2,5,5>,Change(50.0,80.0))
s: [ #bundle, <now>,
  [ "/n_set", 1000, "freq", 112.0 ],
  [ "/n_set", 1001, "freq", 80.0 ] ]

____VERSION____ v7
______ACT______ freqVar.set( 60.0 )
[2 May 2012, 01:43'20.575] Proc - aural freq changed Proc<11 @ 2,4,5,6>
[2 May 2012, 01:43'20.576] Proc - aural freq changed Proc<11 @ 2,2,5,6>
aural changes: FreqChanged(Proc<11 @ 2,4,5,6>,Change(112.0,84.0)),FreqChanged(Proc<11 @ 2,2,5,6>,Change(80.0,60.0))
s: [ #bundle, <now>,
  [ "/n_set", 1000, "freq", 84.0 ],
  [ "/n_set", 1001, "freq", 60.0 ] ]

____VERSION____ v8
______ACT______ p.freq = freqVar * (1.4 * 1.4)
[2 May 2012, 01:43'24.621] Proc - aural freq changed Proc<11 @ 2,4,5,7>
aural changes: FreqChanged(Proc<11 @ 2,4,5,7>,Change(84.0,117.59999999999998))
s: [ #bundle, <now>,
  [ "/n_set", 1000, "freq", 117.6 ] ]

____VERSION____ v9
______ACT______ p' = p.meld( Path(0, 4, 5, 7) )
......yields Proc<11 @ 2,4,5,7>
______ACT______ group.add( p' )
[2 May 2012, 01:43'28.746] Proc - aural added Proc<11 @ 2,4,5,7> -- playing? true
s: [ #bundle, <now>,
  [ "/d_recv", DATA[7453] ],
  [ "/sync", 2 ] ]
r: [ "/done", "/d_recv" ]
r: [ "/synced", 2 ]
s: [ #bundle, <now>,
  [ "/s_new", "proc2", 1002, 0, 1, "freq", 84.0 ] ]
r: [ "/n_go", 1002, 1, -1, 1001, 0 ]

____VERSION____ v10
______ACT______ freqVar.set( 50.0 )
[2 May 2012, 01:43'32.891] Lucre - evt Expr.Var<6 @ 1(,4,5,8,9),9> set 50.0 (con = true)
[2 May 2012, 01:43'32.892] Lucre - evt Expr.Var<6 @ 1(,4,5,8,9),9> fire Change(60.0,50.0)
[2 May 2012, 01:43'32.892] Lucre - evt push begin
[2 May 2012, 01:43'32.894] Lucre - evt   visit VirtualNode.Raw<22 @ 2,2,5,7,9,9>.select(1) (new ? true)				// proc.freq.ref
[2 May 2012, 01:43'32.895] Lucre - evt     visit VirtualNode.Raw<11 @ 2,2,5,7,9,9>.select(4) (new ? true)			// proc
[2 May 2012, 01:43'32.896] Lucre - evt       visit VirtualNode.Raw<1 @ 0,4,5,7,9,9>.select(2) (new ? true)			// group
[2 May 2012, 01:43'32.897] Lucre - evt         addLeaf ObserverKey(0), parent = VirtualNode.Raw<1 @ 0,4,5,7,9,9>.select(2)
[2 May 2012, 01:43'32.898] Lucre - evt   visit VirtualNode.Raw<31 @ 8(,7,9),9>.select(1) (new ? true)				// times (1.4*1.4)
[2 May 2012, 01:43'32.899] Lucre - evt     visit VirtualNode.Raw<22 @ 2,4,5,8,9,9>.select(1) (new ? true)			// proc.freq.ref
[2 May 2012, 01:43'32.899] Lucre - evt       visit VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4) (new ? true)			// proc
[2 May 2012, 01:43'32.900] Lucre - evt         visit VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2) (new ? true)			// group
[2 May 2012, 01:43'32.901] Lucre - evt           addLeaf ObserverKey(0), parent = VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2)
[2 May 2012, 01:43'32.901] Lucre - evt   visit VirtualNode.Raw<28 @ 5(,7,9),9>.select(1) (new ? true)				// times (1.4)
[2 May 2012, 01:43'32.903] Lucre - evt     visit VirtualNode.Raw<22 @ 2,4,5,7,9,9>.select(1) (new ? true)			// proc.freq.ref
[2 May 2012, 01:43'32.903] Lucre - evt       visit VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4) (new ? true)			// proc
[2 May 2012, 01:43'32.904] Lucre - evt         visit VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2) (new ? false)			// group
[2 May 2012, 01:43'32.904] Lucre - evt pull begin
[2 May 2012, 01:43'32.904] Lucre - evt numReactions = 2
[2 May 2012, 01:43'32.910] Proc - aural freq changed Proc<11 @ 2,2,5,7,9,9>
aural changes: FreqChanged(Proc<11 @ 2,2,5,7,9,9>,Change(60.0,50.0))
[2 May 2012, 01:43'32.911] Proc - aural freq changed Proc<11 @ 2,4,5,8,9,9>
[2 May 2012, 01:43'32.911] Proc - aural freq changed Proc<11 @ 2,4,5,7,9,9>
aural changes: FreqChanged(Proc<11 @ 2,4,5,8,9,9>,Change(117.59999999999998,97.99999999999999)),FreqChanged(Proc<11 @ 2,4,5,7,9,9>,Change(84.0,70.0))
[2 May 2012, 01:43'32.911] Lucre - evt pull end
s: [ #bundle, <now>,
  [ "/n_set", 1001, "freq", 50.0 ],
  [ "/n_set", 1000, "freq", 98.0 ],
  [ "/n_set", 1002, "freq", 70.0 ] ]

Final list of procs in group is [ (Proc<11 @ 2,4,5,7,9,10>,70.0), (Proc<11 @ 2,4,5,8,9,10>,97.99999999999999), (Proc<11 @ 2,2,5,8,9,10>,50.0) ]

::::::::::::::

(when it was broken before due, the reason was:)

Node<1 @ 0,4,5,8,9,9>.event[Element[<?>]] : parents = Set(VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4), VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4))  [OK]
flatMap:
(1)
   sel 		= VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4)
   elem		= Proc<11 @ 2,4,5,8,9,9>
   event	= Expr.Var<22 @ 2,4,5,8,9,9>.map[FreqChanged[<?>]]
   pulled	= Some(FreqChanged(Proc<11 @ 2,4,5,8,9,9>,Change(117.59999999999998,97.99999999999999)))
(2)
   sel		= VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4)
   elem		= Proc<11 @ 2,4,5,7,9,9>
   event	= Expr.Var<22 @ 2,4,5,7,9,9>.map[FreqChanged[<?>]]
       Expr.Var<22 @ 2,4,5,7,9,9> pull
       --> parents = Set(VirtualNode.Raw<28 @ 5,7,9,9>.select(1))
       --> thus branch to get.changed.pullUpdate( pull )

	get = (Expr.Var<6 @ 1,2,5,7,9,9> * 1.4) aka `times` (Targets<28 @ 5,7,9,9>)
           _1c = Expr.Var<6 @ 1,2,5,7,9,9>
           _2c = (dummy)

           Expr.Var<6 @ 1,2,5,7,9,9> isSource ? aka pull.hasVisited( Expr.Var<6 @ 1,2,5,7,9,9> )

           visited.keys = Set(VirtualNode.Raw<22 @ 2,4,5,7,9,9>.select(1),
                              VirtualNode.Raw<1 @ 0,4,5,8,9,9>.select(2),
                              VirtualNode.Raw<11 @ 2,4,5,8,9,9>.select(4),
                              VirtualNode.Raw<22 @ 2,4,5,8,9,9>.select(1),
                              VirtualNode.Raw<11 @ 2,4,5,7,9,9>.select(4) 
                              VirtualNode.Raw<31 @ 8,7,9,9>.select(1),
                              VirtualNode.Raw<1 @ 0,4,5,7,9,9>.select(2),
                              VirtualNode.Raw<22 @ 2,2,5,7,9,9>.select(1),
                              VirtualNode.Raw<28 @ 5,7,9,9>.select(1),
                              Expr.Var<6 @ 1,4,5,8,9,9>,                             // !
                              VirtualNode.Raw<11 @ 2,2,5,7,9,9>.select(4))

          ---> returns false **because the confluent ID is checked, and not the partial one**

---> solved with PartialID (equals/hashCode)
