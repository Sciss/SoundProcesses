[2 Apr 2012, 09:05'09.398] Confluent - txn flush write Leaf(Proc<11 @ >,null) for <5 @ 0,2>
[2 Apr 2012, 09:05'09.524] Confluent - txn flush write Expr.Var<6 @ 1,1> for <17 @ 2,2>

Added(Node<1 @ 0,1>,Vector(Proc<11 @ >))
Added(Node<1 @ 0,3>,Vector(Proc<11 @ 2,2>))

____PAPER____ access freqVar
[2 Apr 2012, 09:05'09.695] Confluent - Var(<10 @ 0,0>) get
[2 Apr 2012, 09:05'09.695] Confluent - txn get' <10 @ 0,3,4,4>
[2 Apr 2012, 09:05'09.695] Confluent - txn readID <6 @ 1,3,4,4>
[2 Apr 2012, 09:05'09.695] Confluent - txn read Var(<7 @ 1,3,4,4>)
[2 Apr 2012, 09:05'09.695] Confluent - txn read Var[Int](<8 @ 1,3,4,4>)
[2 Apr 2012, 09:05'09.695] Confluent - txn read Var(<9 @ 1,3,4,4>)

::::::::::::::::::::::::::

theoretically

p1 = proc<0,1>
fr = var<1,1>
  p1.freq<1,1> <-- fr<1,1>
  fr.children<1,1> = Seq( p1.freq<1,1> )

:::
meld
p1 = proc<0,1,3,3>
p2 = proc<0,2,3,3>
fr.children unchanged!

thus when set

///////////////////// fr.freq<1,1,3,4>.set( x )

p1.freq := freqVar * 1.4

what happens is that first
- p1.freq(ref) removes itself from freqVar
- and that erases the reference to p2 as well

[2 Apr 2012, 09:05'09.562] Confluent - Var(<7 @ 1,2>) set Vector() // freq(children) = Nil  (-= proc.freq)

note that in 0,2 we would still find proc<0,2>.freq for freq(children)

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

- in a way, the behaviour is quite coherent: an object which re-enters through a meld is not observed initially;
  it only enters the radar by being added to some object in the main access path, raising an event in that main
  object which eventually results in the melded object receiving new live observers.
- therefore, the error must be sought in the melded object wrongly believing that it is 'connected'
- wouldn't it thus be sufficient to change the `--->` behaviour as follows

   (InvariantEvent)

   final private[lucre] def --->( r: ExpandedSelector[ S ])( implicit tx: S#Tx ) {
      if( reactor._targets.add( slot, r )) connect()
   }

   (Targets)

      private[event] def add( slot: Int, sel: ExpandedSelector[ S ])( implicit tx: S#Tx ) : Boolean = {
         val tup  = (slot, sel)
         val old  = childrenVar.get
         sel.writeValue()
         childrenVar.set( old :+ tup )
         !old.exists( _._1 == slot )
      }

   --> always call into connect, where connect first checks if the source is already connected and only adds
       source connections when they didn't exist. it would thus refresh the source connections?

::::::::::

the group.add( p_melded ) :

Expr.Var<14 @ 2,2>.map[FreqChanged[<?>]] ---> Node<1 @ 0,3>.event[Element[<?>]]
= reactor Targets<11 @ 2,2>.add( slot = 1, sel = Node<1 @ 0,3>.event[Element[<?>]])
  old children : Vector((1,Node<1 @ 0,2>.event[Element[<?>]]))

---> all it needs to do!!
     is to iterate through the sources, and ask each source if it connects to the node or not!
     --> if not, reconnect that source
     --> this may be a performance penality for collection objects being melded ...
     --> not just melded, but any collection object -- because it doesn't have knowledge about whether it
         was melded or not, hence any group would have to check each element whenever an observer is
         attached to the group ...

         --> therefore, a better approach would be to invent a mechanism by which Targets.read would
             notice whether a reactor is accessed the first time after a meld?

---> question: - sketch a case, where the un-melded proc's freq is _not_ modified before the meld, but _afterwards_
               - what happens now? is the melded proc cut off (HOPE NOT) or still connected to the freq's source?

:::::::::::::::::::::

other question: this won't work for mutating events. thus, they need to be exempt from melding -- is that reasonable?

:::::::::::::::::::::
.:.:.:.:.:.:.:.:.:.:.
 : : : : : : : : : :
. . . . . . . . . . .

::::::::: 12-Apr-12 :::::::::

hypothese: 
- Expr.Var must be a combination of
  partial persistence and quasi-retroactive (retroChild) modification

- everything that is not reactive/observable can be driven if quasi-retroactive insertions
  (because they won't generate an event)

Proc
   freqVar: S#Var[ Expr[ Double ]]  // aka confluent
   
:::::::::::::::::::::

'catapult'

first: say freqVar was created in v0, proc in v1

... v1 ...
   proc<>
   proc.freq<> init freqVar<0,0>
      freqVar.children<0,0> += (writeTerm 1) proc<>

traverse v1
   proc<1,1>
   proc.freq<1,1>.value
      freqVar<0,1>.value

... v2 ...
   times<>
      a: freqVar<0,1>
   proc.freq<1,1> set times<>
      freqVar.children<0,1> -= proc<1,1>
      times.children<> += (writeTerm 2) proc<1,1>
      freqVar.children<0,1> += times<>

traverse v2
   proc<1,2>
   proc.freq<1,2>.value
      times<2,2>.value
      freqVar<0,2>.value

... v3 ...
   group += proc<1,1>MELD
-----> how to detect existence of proc<1,2> ??
-----> ask for live views involving proc?
-----> but then there might be a different proc being in freqVar.children
(unless the whole chain is kept live, but that's exactly what we tried
 to avoid with collection events)

thus the question is: how to know all the children of freqVar that will be
visible in version 3...

-----> we would need to store outgoing edges in the versions?
if v8 was actually before v3, how would we gather freqVar.children in v3?



proc.freq
  <1,1> : freqVar<0,0>
  <1,2> : times<>
freqVar.children
  <0,0> : []
  <0,1> : [ proc<> ]
  <0,2> : [ times<> ]
  <0,8> : [ otra cosa ]

:::::::::::::::::::::

doppel key bestehend aus event source _und_ event target? something like a bi-directional dictionary.

[ <int> sourceID, <int> targetID, <long> (partial-hash) ] -> partial or full entry?

:::::::::::::::::::::

is there a primary access path for a vertex? that is, can we distinguish one of its in-edges as prioritised?
(meld is called from _within an access path_)

:::::::::::::::::::::

- 'v8 otra cosa' is actually not a problem -- if it _is_ a child of freqVar, it is because it has a live view,
and then naturally it should be notified about changes to freqVar.
- if is not viewed, it is detached, and thus does not appear in freqVar.children
- still, it would destroy the preservation of the linear version history

:::::::::::::::::::::

what we currently anyway need to do is read the whole children vector, so that's already O(n) with n = numChildren.
it is thus not degrading performance to perform an additional check on each child, e.g. whether it has an outEdge
going to the new melded tree?

:::::::::::::::::::::

a _stale_ view would only evaluate the expressions (even to save their values in view proxies), but not
register observers!

do we allow multiple live views corresponding to different cursors?
(it doesn't really seem to make any practical sense...?)

:::::::::::::::::::::

Expr.Var : Targets = ephemeral
           Ref     = partially persistent (but if we carry around confluent paths, may also be regularly confluent)

BRAIN RUN 1

v0
   new group
       children += live observer

v0 -> v1
   new exprVar freqVar
       value : write <1,1> --> 50.0
       children : write Nil

v1 -> v2
   access freqVar = freqVar<1,1>

   new proc
       id = <y @ >
       freq.set( freqVar<1,1> ) : write<2,2>
 
   access group = group<0,1>

   group.add( proc<> ) : write<0,2>
      group<0,1> ---> proc<>
      proc.children<> += group<0,1> (write <2,2>)
      proc<> ---> freqVar
         proc.freq<>.get --> freqVar<1,1>
         proc<> ---> freqVar<1,1>
         freqVar<1,1>.children += proc<>
         = freqVar.childrenEph      += <1,1> -> proc<>
           freqVar.childrenPar<1,1> += proc<> : write <1,2>

v2 -> v3
   access proc = proc<2,2>
   proc.freq = freqVar * 1.4
      proc -/-> freqVar
      proc.freq<2,2>.get --> freqVar<1,2>
      proc<2,2> -/-> freqVar<1,2>
      freqVar<1,2>.children -= proc<2,2>
      = freqVar.childrenPar<1,2>.get --> proc<2,2> + info that it was stored at <1,1> -> proc<>
        freqVar.childrenEph -= <1,1> -> proc<???>

      proc ---> times<>
      proc.freq<2,2>.set --> times<>
      times<>.children += proc<2,2>
      = times.childrenEph   += <> -> proc<2,2>
        times.childrenPar<> += proc<2,2> : write<3,3>
      times<> ---> freqVar
         times.a<>.get --> freqVar<1,2>
         freqVar<1,2>.children += times<>
         = freqVar.childrenEph      += <1,2> -> times<>
           freqVar.childrenPar<1,2> += times : write <1,3>

v3 -> v4
   access group = group<0,3>
   
   proc' = v2.meld( proc ) = proc<2,2>
   group.add( proc' )
      group<0,3> ---> proc<2,2>
      proc.children<2,2> += group<0,3> (write <2,2,4,4>)
      ---- now was proc.children empty or not?
      ---- XXX let's assume we can detect that freqVar should be reconnected
	      proc<2,2> -*-> freqVar
	      proc.freq<2,2>.get --> freqVar<1,2>
	      proc<2,2> -*-> freqVar<1,2>
	      freqVar<1,2>.children refresh (and add-if-necessary proc<2,2>)

              ---> in-vertices = [ 3, 2 ]

              at <1,3> we find times<> --> expand to times<3,3>
              at <1,2> we find proc<>  --> expand to proc<2,2>

              ---> re-write

              freqVar.childrenEph := <1,?> -> [
                 times<3,3>, proc<2,2>, ((( NEIN: proc<2,3> ?? )))]

              freqVar.childrenPar<1,2> := [ times<3,3>, proc<2,2>, proc<2,3> ?? ] : write <1,4,4> !

v4 -> v5
   freqVar.set( 40.0 )

   access freqVar = freqVar<1,(3,)4,4>
   
   freqVar<1,(3,)4,4>.set( 40.0 )
   -> fire

   finds children : [ times<3,3>, proc<2,2>, proc<2,3> ?? ] at 1,4,4
      how are they expanded?
         times<3,(3,)4,4>
         proc<2,2,4,4>
         ((( NEIN: proc<2,3,4,4> )))

      ...and propagated
         proc.children<2,2,4,4> --> finds group<0,3> right?
            thus expands to group<0,3,4,4>, right?

         times.children<3,(3,)4,4> --> finds proc<2,2> written at <3,3> right?
            thus expands to proc<2,3,4,4>, right?
            thus finds group<0,2>, expands to group<0,3,4,4>, right?

looks all good, despite the question marks ....

:::::::::::::::::::::

the main question mark is how to properly remove a child (in v2)

:::::::::::::::::::::

BRAIN RUN 2
- childrenEph is not needed it seems?
- exprVar Ref _does_ need to be partially persistent

v0
   new group
       children += live observer : write <0,0>

v0 -> v1
   new exprVar freqVar
       value : write <1,1> --> 50.0
       children : write <1,1> --> Nil

v1 -> v2
   access freqVar = freqVar<1,1>

   new proc
       id = <y @ >
       freq.set( freqVar<1,1> ) : write<2,2>
   
   access group = group<0,1>
   
   group.add( proc<> ) : write<0,2>
      group<0,1> ---> proc<>
      proc.children<> += group<0,1> : write <2,2>
      ; is first child, thus engage:
      proc<> ---> freqVar
         proc.freq<>.get --> freqVar<1,1>
         proc<> ---> freqVar<1,1>
         freqVar<1,1>.children += proc<>
         = freqVar.childrenPar<1,1> += proc<> : write <1,2>

+--- let's see how the live view is built
|
|  fire Group.Added( group<0,1> --> proc<> )
|  proc.freq<>.get --> freqVar<1,1>
|  freqVar<1,1>.value --> finds 50.0  (OK)
|
+---

v2 -> v3
   access proc = proc<2,2>
   proc.freq set freqVar * 1.4
      ? is proc.freq connected ?
         proc.children<2,2>.get --> [ group<0,1 (expanded to group<0,2>) ] --> YES
      proc -/-> freqVar
      proc.freq<2,2>.get --> freqVar<1,2>
      proc<2,2> -/-> freqVar<1,2>
      freqVar<1,2>.children -= proc<2,2>
      = freqVar.childrenPar<1,2>.get --> [ proc<> (expanded to proc<2,2>) ]
        freqVar.childrenPar<1,2> := []  : cache

      proc ---> times<>
      proc.freq<2,2>.set --> times<>
      times<>.children += proc<2,2>
      = times.childrenPar<> += proc<2,2> : write<3,3>
      ; is first child, thus engage:
      times<> ---> freqVar
         times.a<>.get --> freqVar<1,2>
         freqVar<1,2>.children += times<>
         = freqVar.childrenPar<1,2> := [ times<> ] : write <1,3>

+--- events
|
|  proc.freq<2,2> fire
|     before.value
|        freqVar<1,2>.value --> finds 50.0
|     now.value
|        times<>.value -->  yields 70.0
|     children<2,2> --> expanded group<0,2>
|     Group.Element( group<0,2>, [ FreqChanged( proc<2,2>, 50.0 -> 70.0 )])  (OK)
|
+---

v3 -> v4
   access group = group<0,3>
   
   proc' = (v0,v2).meld( proc ) = proc<2,2>   : add in-edge v2 to tx-info
   group.add( proc' )
      group<0,3> ---> proc<2,2>
      proc.children<2,2> += group<0,3>
         proc.children<2,2>.get --> [ group<0,1> expanded to group<0,3> ]
         ; what should be do here?
         ; could use a Map instead with use-count? let's try...
         proc.children<2,2> := [ group<0,3> {cnt=2} ] : write <2,2,4,4>
         
      ---- XXX let's assume we can detect that freqVar should be reconnected.
      ---- doesn't a detected un-updated meld indicate that the children value
      ---- is completely invalid? that it should be re-established anyways?

	      proc<2,2> -*-> freqVar
	      proc.freq<2,2>.get --> freqVar<1,2>
	      proc<2,2> -*-> freqVar<1,2>
	      freqVar<1,2>.children refresh (and add-if-necessary proc<2,2>)

              ---> in-vertices = [ 3, 2 ]

              at <1,3> we find times<> --> expand to times<3,3>
              at <1,2> we find proc<>  --> expand to proc<2,2>

              ---> re-write

              freqVar.childrenPar<1,2> := [ times<3,3>, proc<2,2> ] : write <1,4,4> !

+--- events
|
|  fire Group.Added( group<0,3> --> proc<2,2> )
|  proc.freq<2,2>.get --> freqVar<1,1>
|  freqVar<1,1>.value --> finds 50.0  (OK)
|
+---

+--- what if the melded proc was not observed?
|
|  - freqVar.children wouldn't have been refreshed
|  - searching in <1,(3,)4,4 finds freqVar.childrenPar<1,2> := [ times<> ] : writeTerm 3
|  - hence, yields times<3,(3,)4,4> --> correct
|
+---

v4 -> v5
   freqVar.set( 40.0 )

   access freqVar = freqVar<1,(3,)4,4>
   
   freqVar<1,(3,)4,4>.set( 40.0 )
   -> fire change 50 -> 40

   finds children : [ times<3,3>, proc<2,2>] at 1,4,4
      how are they expanded?
         times<3,(3,)4,4>
         proc<2,2,4,4>

      ...and propagated
         proc.children<2,2,4,4> --> group<0,3> expands to group<0,3,4,4>

         times.children<3,(3,)4,4> --> finds proc<2,2> written at <3,3>
            thus expands to proc<2,3,4,4>
            thus finds group<0,2>, expands to group<0,3,4,4>

+--- events
|
|  freqVar<1,(3,)4,4> fire
|     Group.Element( group<0,3,4,4>, [ 
|        FreqChanged( proc<2,2,4,4>, 50.0 -> 40.0 )
|        FreqChanged( proc<2,3,4,4>, 70.0 -> 64.0 )
|     ])
|
+---

- todo: how does the view distinguish the newly melded procs?

:::::::::::::::::::::

      ---- XXX let's assume we can detect that freqVar should be reconnected.
      ---- doesn't a detected un-updated meld indicate that the children value
      ---- is completely invalid? that it should be re-established anyways?

The refresh can be interpreted differently: Indeed we _only_ need to read the
main in version, that is, look at in-vertex 3 -->

      at <1,3> we find times<> --> expand to times<3,3>

and then the freshly melded dependent is added

      for <1,2> add proc<2,2>

thus the result is the same:

      freqVar.childrenPar<1,2> := [ times<3,3>, proc<2,2> ] : write <1,4,4> !

but it doesn't make the mistake of adding old dependants which are not explicitly re-added
as observations in the new melded version

:::::::::::::::::::::

So we can restate: In a meld, the melded objects are initially unobserved. When they are added to an observing structure, a refresh is enforced; the refresh will add the melded object to the children of its sources, where those children are initialised to the value read at the main access terminal version (those are the children already observed).

It remains to clarify how the need for refresh is detected.

      proc.children<2,2> += group<0,3>
      proc.children<2,2>.get ---> write was at <2,2>
      ; we could ask tx.currentTargetLevel and compare that with the children.get found prefix tree level
      ; --> if they diverge, a refresh is needed

:::::::::::::::::::::

should test a few other cases to make sure this still works
